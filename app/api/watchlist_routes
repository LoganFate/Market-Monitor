from flask import Blueprint, jsonify, request
from flask_login import login_required, current_user
from app.models import  db, Watchlist, Stock

watchlist_routes = Blueprint('watchlist', __name__)



@watchlist_routes.route('/watchlist/<int:watchlist_id>', methods=['POST'])
@login_required
def add_stock_to_watchlist(watchlist_id):
    data = request.get_json()
    stock_id = data.get('stock_id')  # This is expected to be an integer

    if not stock_id:
        return jsonify({"error": "Stock ID is required."}), 400

    watchlist = Watchlist.query.filter_by(id=watchlist_id, user_id=current_user.id).first()
    if not watchlist:
        return jsonify({"error": "Watchlist not found."}), 404

    stock = Stock.query.get(stock_id)  # Works seamlessly with integer IDs
    if not stock:
        return jsonify({"error": "Stock not found."}), 404

    if stock in watchlist.stocks:
        return jsonify({"error": "Stock already in watchlist."}), 409

    watchlist.stocks.append(stock)
    db.session.commit()

    return jsonify({"message": "Stock added to watchlist successfully."}), 201

@watchlist_routes.route('/watchlist', methods=['GET'])
@login_required
def view_watchlist():

    watchlist = Watchlist.query.filter_by(user_id=current_user.id).first()

    if not watchlist:
        return jsonify({"error": "Watchlist not found."}), 404


    stocks = watchlist.stocks


    stocks_data = [{
        "id": stock.id,
        "symbol": stock.symbol,
        "name": stock.name,
        "price": stock.price,
        "category": stock.category
        # add stock fields later if API requires
    } for stock in stocks]

    return jsonify(stocks_data), 200


@watchlist_routes.route('/watchlist/<int:watchlist_id>', methods=['PUT'])
@login_required
def update_watchlist(watchlist_id):
    # Ensure the watchlist belongs to the current user
    watchlist = Watchlist.query.filter_by(id=watchlist_id, user_id=current_user.id).first()
    if not watchlist:
        return jsonify({"error": "Watchlist not found."}), 404

    data = request.get_json()
    stock_category = data.get('stock_category')

    # Update the category of each stock in the watchlist
    for stock in watchlist.stocks:
        stock.category = stock_category
    db.session.commit()

    return jsonify({"message": "Watchlist updated successfully."}), 200

@watchlist_routes.route('/watchlist/<int:watchlist_id>', methods=['DELETE'])
@login_required
def remove_from_watchlist(watchlist_id):

    stock_id = request.args.get('stock_id')

    if not stock_id:
        return jsonify({"error": "Stock ID is required."}), 400

    watchlist = Watchlist.query.filter_by(id=watchlist_id).first()
    if not watchlist:
        return jsonify({"error": "Watchlist not found."}), 404


    if not (current_user.is_admin or watchlist.user_id == current_user.id):
        return jsonify({"error": "Unauthorized"}), 403


    stock = Stock.query.filter_by(id=stock_id).first()
    if not stock or stock not in watchlist.stocks:
        return jsonify({"error": "Stock not found in watchlist."}), 404


    watchlist.stocks.remove(stock)
    db.session.commit()

    return '', 204
